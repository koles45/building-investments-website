//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  investment: Investment;
  investmentConnection: InvestmentConnection;
  properties: Properties;
  propertiesConnection: PropertiesConnection;
  news: News;
  newsConnection: NewsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryInvestmentArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryInvestmentConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<InvestmentFilter>;
};


export type QueryPropertiesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPropertiesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PropertiesFilter>;
};


export type QueryNewsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNewsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsFilter>;
};

export type DocumentFilter = {
  investment?: InputMaybe<InvestmentFilter>;
  properties?: InputMaybe<PropertiesFilter>;
  news?: InputMaybe<NewsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Investment | Properties | News | Folder;

export type Investment = Node & Document & {
  __typename?: 'Investment';
  title: Scalars['String']['output'];
  number: Scalars['Float']['output'];
  properties_count: Scalars['Float']['output'];
  description: Scalars['String']['output'];
  availability: Scalars['Boolean']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type InvestmentFilter = {
  title?: InputMaybe<StringFilter>;
  number?: InputMaybe<NumberFilter>;
  properties_count?: InputMaybe<NumberFilter>;
  description?: InputMaybe<StringFilter>;
  availability?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type InvestmentConnectionEdges = {
  __typename?: 'InvestmentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Investment>;
};

export type InvestmentConnection = Connection & {
  __typename?: 'InvestmentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<InvestmentConnectionEdges>>>;
};

export type Properties = Node & Document & {
  __typename?: 'Properties';
  title: Scalars['String']['output'];
  investment_number: Scalars['Float']['output'];
  type: Scalars['String']['output'];
  square_meters: Scalars['Float']['output'];
  plot_square_meters: Scalars['Float']['output'];
  availability: Scalars['Boolean']['output'];
  reservation: Scalars['Boolean']['output'];
  price: Scalars['Float']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PropertiesFilter = {
  title?: InputMaybe<StringFilter>;
  investment_number?: InputMaybe<NumberFilter>;
  type?: InputMaybe<StringFilter>;
  square_meters?: InputMaybe<NumberFilter>;
  plot_square_meters?: InputMaybe<NumberFilter>;
  availability?: InputMaybe<BooleanFilter>;
  reservation?: InputMaybe<BooleanFilter>;
  price?: InputMaybe<NumberFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PropertiesConnectionEdges = {
  __typename?: 'PropertiesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Properties>;
};

export type PropertiesConnection = Connection & {
  __typename?: 'PropertiesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PropertiesConnectionEdges>>>;
};

export type News = Node & Document & {
  __typename?: 'News';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NewsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type NewsConnectionEdges = {
  __typename?: 'NewsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<News>;
};

export type NewsConnection = Connection & {
  __typename?: 'NewsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NewsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateInvestment: Investment;
  createInvestment: Investment;
  updateProperties: Properties;
  createProperties: Properties;
  updateNews: News;
  createNews: News;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationUpdateInvestmentArgs = {
  relativePath: Scalars['String']['input'];
  params: InvestmentMutation;
};


export type MutationCreateInvestmentArgs = {
  relativePath: Scalars['String']['input'];
  params: InvestmentMutation;
};


export type MutationUpdatePropertiesArgs = {
  relativePath: Scalars['String']['input'];
  params: PropertiesMutation;
};


export type MutationCreatePropertiesArgs = {
  relativePath: Scalars['String']['input'];
  params: PropertiesMutation;
};


export type MutationUpdateNewsArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsMutation;
};


export type MutationCreateNewsArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsMutation;
};

export type DocumentUpdateMutation = {
  investment?: InputMaybe<InvestmentMutation>;
  properties?: InputMaybe<PropertiesMutation>;
  news?: InputMaybe<NewsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  investment?: InputMaybe<InvestmentMutation>;
  properties?: InputMaybe<PropertiesMutation>;
  news?: InputMaybe<NewsMutation>;
};

export type InvestmentMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  number?: InputMaybe<Scalars['Float']['input']>;
  properties_count?: InputMaybe<Scalars['Float']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  availability?: InputMaybe<Scalars['Boolean']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PropertiesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  investment_number?: InputMaybe<Scalars['Float']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  square_meters?: InputMaybe<Scalars['Float']['input']>;
  plot_square_meters?: InputMaybe<Scalars['Float']['input']>;
  availability?: InputMaybe<Scalars['Boolean']['input']>;
  reservation?: InputMaybe<Scalars['Boolean']['input']>;
  price?: InputMaybe<Scalars['Float']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type NewsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type InvestmentPartsFragment = { __typename?: 'Investment', title: string, number: number, properties_count: number, description: string, availability: boolean, body?: any | null };

export type PropertiesPartsFragment = { __typename?: 'Properties', title: string, investment_number: number, type: string, square_meters: number, plot_square_meters: number, availability: boolean, reservation: boolean, price: number, body?: any | null };

export type NewsPartsFragment = { __typename?: 'News', title: string, description: string, body?: any | null };

export type InvestmentQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type InvestmentQuery = { __typename?: 'Query', investment: { __typename?: 'Investment', id: string, title: string, number: number, properties_count: number, description: string, availability: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type InvestmentConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<InvestmentFilter>;
}>;


export type InvestmentConnectionQuery = { __typename?: 'Query', investmentConnection: { __typename?: 'InvestmentConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'InvestmentConnectionEdges', cursor: string, node?: { __typename?: 'Investment', id: string, title: string, number: number, properties_count: number, description: string, availability: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PropertiesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PropertiesQuery = { __typename?: 'Query', properties: { __typename?: 'Properties', id: string, title: string, investment_number: number, type: string, square_meters: number, plot_square_meters: number, availability: boolean, reservation: boolean, price: number, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PropertiesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PropertiesFilter>;
}>;


export type PropertiesConnectionQuery = { __typename?: 'Query', propertiesConnection: { __typename?: 'PropertiesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PropertiesConnectionEdges', cursor: string, node?: { __typename?: 'Properties', id: string, title: string, investment_number: number, type: string, square_meters: number, plot_square_meters: number, availability: boolean, reservation: boolean, price: number, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type NewsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NewsQuery = { __typename?: 'Query', news: { __typename?: 'News', id: string, title: string, description: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type NewsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsFilter>;
}>;


export type NewsConnectionQuery = { __typename?: 'Query', newsConnection: { __typename?: 'NewsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NewsConnectionEdges', cursor: string, node?: { __typename?: 'News', id: string, title: string, description: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const InvestmentPartsFragmentDoc = gql`
    fragment InvestmentParts on Investment {
  title
  number
  properties_count
  description
  availability
  body
}
    `;
export const PropertiesPartsFragmentDoc = gql`
    fragment PropertiesParts on Properties {
  title
  investment_number
  type
  square_meters
  plot_square_meters
  availability
  reservation
  price
  body
}
    `;
export const NewsPartsFragmentDoc = gql`
    fragment NewsParts on News {
  title
  description
  body
}
    `;
export const InvestmentDocument = gql`
    query investment($relativePath: String!) {
  investment(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...InvestmentParts
  }
}
    ${InvestmentPartsFragmentDoc}`;
export const InvestmentConnectionDocument = gql`
    query investmentConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: InvestmentFilter) {
  investmentConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...InvestmentParts
      }
    }
  }
}
    ${InvestmentPartsFragmentDoc}`;
export const PropertiesDocument = gql`
    query properties($relativePath: String!) {
  properties(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PropertiesParts
  }
}
    ${PropertiesPartsFragmentDoc}`;
export const PropertiesConnectionDocument = gql`
    query propertiesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PropertiesFilter) {
  propertiesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PropertiesParts
      }
    }
  }
}
    ${PropertiesPartsFragmentDoc}`;
export const NewsDocument = gql`
    query news($relativePath: String!) {
  news(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NewsParts
  }
}
    ${NewsPartsFragmentDoc}`;
export const NewsConnectionDocument = gql`
    query newsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NewsFilter) {
  newsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NewsParts
      }
    }
  }
}
    ${NewsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      investment(variables: InvestmentQueryVariables, options?: C): Promise<{data: InvestmentQuery, variables: InvestmentQueryVariables, query: string}> {
        return requester<{data: InvestmentQuery, variables: InvestmentQueryVariables, query: string}, InvestmentQueryVariables>(InvestmentDocument, variables, options);
      },
    investmentConnection(variables?: InvestmentConnectionQueryVariables, options?: C): Promise<{data: InvestmentConnectionQuery, variables: InvestmentConnectionQueryVariables, query: string}> {
        return requester<{data: InvestmentConnectionQuery, variables: InvestmentConnectionQueryVariables, query: string}, InvestmentConnectionQueryVariables>(InvestmentConnectionDocument, variables, options);
      },
    properties(variables: PropertiesQueryVariables, options?: C): Promise<{data: PropertiesQuery, variables: PropertiesQueryVariables, query: string}> {
        return requester<{data: PropertiesQuery, variables: PropertiesQueryVariables, query: string}, PropertiesQueryVariables>(PropertiesDocument, variables, options);
      },
    propertiesConnection(variables?: PropertiesConnectionQueryVariables, options?: C): Promise<{data: PropertiesConnectionQuery, variables: PropertiesConnectionQueryVariables, query: string}> {
        return requester<{data: PropertiesConnectionQuery, variables: PropertiesConnectionQueryVariables, query: string}, PropertiesConnectionQueryVariables>(PropertiesConnectionDocument, variables, options);
      },
    news(variables: NewsQueryVariables, options?: C): Promise<{data: NewsQuery, variables: NewsQueryVariables, query: string}> {
        return requester<{data: NewsQuery, variables: NewsQueryVariables, query: string}, NewsQueryVariables>(NewsDocument, variables, options);
      },
    newsConnection(variables?: NewsConnectionQueryVariables, options?: C): Promise<{data: NewsConnectionQuery, variables: NewsConnectionQueryVariables, query: string}> {
        return requester<{data: NewsConnectionQuery, variables: NewsConnectionQueryVariables, query: string}, NewsConnectionQueryVariables>(NewsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (client: TinaClient) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: any,
    client
  ) => Promise<any> = async (doc, vars, _options) => {
    const data = await client.request({
      query: doc,
      variables: vars,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(createClient({ url: "http://localhost:4001/graphql", queries }))
  );

export const queries = (client: TinaClient) => {
  const requester = generateRequester(client);
  return getSdk(requester);
};

  