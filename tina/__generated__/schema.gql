# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  investment(relativePath: String): Investment!
  investmentConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: InvestmentFilter): InvestmentConnection!
  properties(relativePath: String): Properties!
  propertiesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PropertiesFilter): PropertiesConnection!
}

input DocumentFilter {
  investment: InvestmentFilter
  properties: PropertiesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Investment | Properties | Folder

type Investment implements Node & Document {
  title: String!
  investment_number: Float!
  properties_count: Float!
  description: String!
  availability: Boolean!
  images: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input InvestmentFilter {
  title: StringFilter
  investment_number: NumberFilter
  properties_count: NumberFilter
  description: StringFilter
  availability: BooleanFilter
  images: StringFilter
  body: RichTextFilter
}

type InvestmentConnectionEdges {
  cursor: String!
  node: Investment
}

type InvestmentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [InvestmentConnectionEdges]
}

type Properties implements Node & Document {
  title: String!
  investment_number: Float!
  type: String!
  square_meters: Float!
  plot_square_meters: Float!
  availability: Boolean!
  reservation: Boolean!
  price: Float!
  images: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PropertiesFilter {
  title: StringFilter
  investment_number: NumberFilter
  type: StringFilter
  square_meters: NumberFilter
  plot_square_meters: NumberFilter
  availability: BooleanFilter
  reservation: BooleanFilter
  price: NumberFilter
  images: StringFilter
  body: RichTextFilter
}

type PropertiesConnectionEdges {
  cursor: String!
  node: Properties
}

type PropertiesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PropertiesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateInvestment(relativePath: String!, params: InvestmentMutation!): Investment!
  createInvestment(relativePath: String!, params: InvestmentMutation!): Investment!
  updateProperties(relativePath: String!, params: PropertiesMutation!): Properties!
  createProperties(relativePath: String!, params: PropertiesMutation!): Properties!
}

input DocumentUpdateMutation {
  investment: InvestmentMutation
  properties: PropertiesMutation
  relativePath: String
}

input DocumentMutation {
  investment: InvestmentMutation
  properties: PropertiesMutation
}

input InvestmentMutation {
  title: String
  investment_number: Float
  properties_count: Float
  description: String
  availability: Boolean
  images: [String]
  body: JSON
}

input PropertiesMutation {
  title: String
  investment_number: Float
  type: String
  square_meters: Float
  plot_square_meters: Float
  availability: Boolean
  reservation: Boolean
  price: Float
  images: [String]
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
